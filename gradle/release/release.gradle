def javafxVersion = ext.javafxVersion

apply from: "${rootDir}/gradle/release/innosetup.gradle"
apply from: "${rootDir}/gradle/release/windows.gradle"

tasks.register('downloadAndExtractJREs') {
    dependsOn('downloadAndExtractWindowsJRE')
}

tasks.register('packageAllDists') {
    dependsOn(['windowsDistZip', 'windowsDistTar'])
}

tasks.register('packageApp') {
    dependsOn(['packageAllDists', 'scriptsForRelease'])
    mustRunAfter(tasks.named('packageAllDists'))
}

tasks.register('scriptsForRelease', Copy) {
    dependsOn('downloadLicenses')
    from "${rootDir}/src/main/bin"
    into "${rootDir}/build/bin"

    outputs.upToDateWhen { false }
}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'compile'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    dependsOn('createLicence')
    enabled = true
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'application.Main',
                "Class-Path": configurations.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

tasks.register('createLicence', Copy) {
    dependsOn('processResources')
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "date": new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

distributions {
    windows {
            contents {
                distributionBaseName = 'EyeTry-windows-x64'
                with distributions.main.contents
                from("build/reports")
                from("build/bin/eyeTry-windows.bat") {
                    into 'bin'
                }
                from("build/jre/windows") {
                    into 'lib/jre'
                }
            }
    }
}

windowsDistZip {
    dependsOn(['downloadAndExtractJREs', 'downloadLicenses', 'scriptsForRelease', 'test'])
}

distZip {
    dependsOn(['downloadAndExtractJREs', 'downloadLicenses', 'scriptsForRelease', 'test'])
    duplicatesStrategy.EXCLUDE
}

windowsDistTar {
    dependsOn(['downloadAndExtractJREs', 'downloadLicenses', 'scriptsForRelease', 'test'])
}

distTar {
    dependsOn(['downloadAndExtractJREs', 'downloadLicenses', 'scriptsForRelease', 'test'])
    duplicatesStrategy.EXCLUDE
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}

tasks.withType(Tar).configureEach {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}
