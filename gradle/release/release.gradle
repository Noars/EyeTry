def javafxVersion = ext.javafxVersion

apply from: "${rootDir}/gradle/release/package.gradle"
apply from: "${rootDir}/gradle/release/innosetup.gradle"
apply from: "${rootDir}/gradle/release/windows.gradle"

task('downloadAndExtractJREs', group: 'custom jre') {
    dependsOn downloadAndExtractWindowsJRE
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    enabled=true
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Vendor": "Univ. Grenoble Alpes - LIG - GETALP",
                "Main-Class": 'application.Main',
                "Class-Path": configurations.collect { it.getName() }.join(' '),
                "JavaFX-Version": javafxVersion,
                "Built-By": System.properties['user.name']
        )
    }
}

tasks.jar.dependsOn('createLicence')

task createLicence(dependsOn: ['processResources'], type: Copy, group: 'license') {
    from("${rootDir}/gradle/templates/licence.txt")
    expand([
            "date"   : new Date().format('yyyy-MM-dd')
    ])
    into("${processResources.destinationDir}/data/common")
}

distributions {
    windows {
        contents {
            with distributions.main.contents
            from("build/reports")
            from("build/bin/eye-try.bat") {
                into 'bin'
            }
            from("build/jre/windows-x64") {
                into 'lib/jre'
            }
        }
    }
}

windowsDistZip {
    dependsOn(downloadAndExtractWindowsJRE)
    dependsOn(scriptsForRelease)
}

windowsDistTar {
    dependsOn(scriptsForRelease)
}

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

distZip {
    duplicatesStrategy = 'exclude'
}

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
}

afterReleaseBuild.dependsOn generateWindowsInstallerInDocker
